---
title: "Key Driver Summary (FY25)"
format: html
editor: visual
params:
  service_line : "ON"
  unit2 : "IFMK"
---

```{r}
#| echo: false
#| warning: false 
#load packages----
library(tidyverse)
library(janitor)
library(dplyr)
library(Hmisc)
library(magrittr)
library(kableExtra)
library(janitor)
library(gt)
library(tinytex)

# #load raw data
# clinic_data<-read.csv(file="G:/Press Ganey II/Reports/Ad Hoc/DEEP DIVE/Key Driver Reports/data/kdr_clinic_072024-122024.csv")
# question_bank<-read.csv(file="G:/Press Ganey II/Reports/Ad Hoc/DEEP DIVE/Key Driver Reports/data/OP_questions.csv")
# 
# #clean data
# clinic_data<-clinic_data%>%
#   clean_names()%>%
#   rename(unit=pg_unit, clinic=pg_clinic,date=recdate_day,
#          question=question_text_latest,
#          scale_value=mean_score,top_box=top_box_score)
# 
# question_bank<-question_bank%>%
#   clean_names()
# 
# #Fix problems with the data
# ##From "Plastic Surgery Center" to "Reconstructive Oncology Clinic"
# ##From Blood and Marrow Treatment Center(BMTC) to BMTT unit.
# 
# clinic_data$unit2<-ifelse(clinic_data$clinic =="Blood and Marrow Treatment Center","BMTT",
#                           ifelse(clinic_data$clinic == "Moffitt Wesley Chapel Infusion Center",
#                                  "WCIC",clinic_data$unit))
# 
# clinic_data$clinic2<-ifelse(
#   clinic_data$clinic =="Plastic Surgery Center","Reconstructive Oncology Clinic", clinic_data$clinic
# )
# 
# save(clinic_data,file="G:/Press Ganey II/Reports/Ad Hoc/DEEP DIVE/Key Driver Reports/data/clinic_data.Rdata")


load("G:/Press Ganey II/Reports/Ad Hoc/DEEP DIVE/Key Driver Reports/data/clinic_data.Rdata")
load("G:/Press Ganey II/Reports/Ad Hoc/DEEP DIVE/Key Driver Reports/data/op_question.Rdata")

#set data parameters: service line, clinic, outcome variable(s)----

data<-clinic_data%>%
  filter(service == params$service_line)

data$newdate<- mdy(data$date)

# questions<-question_bank%>%
#   filter(service == params$service_line)

svc<-data%>%
  distinct(service)

if (svc =='ON'){
  outvar<-"O3"
  outvar_all<-c("MED7","O2","O3","O7") #Outpatient Oncology
} else {
  outvar<-"O4"
  outvar_all<-c("CP10","O3","O4") # Virtual Health
}

clinic_filter<-data%>%
  filter(unit2 == params$unit)%>%
  distinct(clinic2)

#Correlations
r<-data%>%
  filter(unit2 == params$unit)%>%
  select(survey_id,varname,value)%>% #use only mean column's data
  spread(varname,value)%>% #convert from long to wide format
  cor(use='pairwise.complete.obs')

tmp1<-r[-1,outvar,drop=FALSE] #drop the survey id, select outvar column & convert to data frame
tmp1<-as.data.frame(tmp1)
tmp1$varname <- rownames(tmp1)
colnames(tmp1)[1] = "corr"
tmp1 <- tmp1 %>%
  filter(corr != "NA")


#Top Box Ratios
#Step 1. convert clinic level data to wide data set nrows = survey count
tbwide<-data%>%
  filter(unit2 == params$unit)%>%
  select(survey_id,varname,top_box)%>% #use only topbox data
  spread(varname,top_box)%>% #convert from long to wide format
  select(-c(survey_id,I69)) #temporary code removes problematic column

# test<-addmargins(xtabs(~o4+o4,tbwide))
# test

#Step 2. create functions to create table(x) and calculate tbratio(y)
tbratio<-function(data,var){
  x<-addmargins(xtabs(~data[,var]+data[,outvar],data))
  y<-((x[2,2]+0.5)/(x[2,3]+1))/((x[1,2]+0.5)/(x[1,3]+1)) 
  return(y)
}

#calculate tbratio across all variables & store as data frame
tmp2<-data.frame()
for (i in 1:dim(tbwide)[2]){ 
  m<-tbratio(tbwide,i)
  tmp2[i,1] <- colnames(tbwide)[i]
  tmp2[i,2] <- m
}

colnames(tmp2)<-c('varname','ratio')

#Percentile Rank
unitrank<-data %>%
  select(survey_id,unit2,varname,top_box)%>% #subset original data set
  group_by(unit2,varname)%>%
  summarise(tbscore=sum(top_box)/n()*100,n=n())%>% #calculate topbox
  #filter(n>29)%>% #remove small samples
  group_by(varname)%>%
  mutate(percent_rank=100*(rank(tbscore)/length(tbscore)))%>%
  filter(unit2 == params$unit)


#merge rankdata, tbratio (tmp2), and correlations(tmp1) to form a table
df1<-merge(unitrank,tmp1)
df2<-merge(df1,tmp2)
df3<-subset(df2, !(varname %in% outvar_all))#removes the response variables from priority index calculations

#Sorted KDR

kd0<-df3%>%
  mutate(rescaled_corr = (corr-min(corr))/(max(corr)-min(corr)),
         rescaled_tbratio = (ratio-min(ratio))/(max(ratio)-min(ratio)),
         driver_index = 100*((rescaled_corr + rescaled_tbratio)/2),
         priority_index = driver_index-(0.5*((percent_rank)))
  )


kd1<-left_join(df2,kd0)

kd2<-merge(kd1,questions,by="varname") 

kdr<-kd2%>%
  top_n(10,priority_index)%>%
  arrange(desc(priority_index))%>%
  select(question_text_latest,corr,ratio,driver_index,tbscore,percent_rank)%>%
  mutate(across(c(corr,ratio),round, 2))%>%
  mutate(tbscore=round(tbscore,1))%>%
  mutate(across(c(driver_index,percent_rank),round))%>%
  mutate(tbscore_rank=paste(tbscore," (",percent_rank,")"))%>%
  select(-c(tbscore,percent_rank))%>%
  rename('Question' = question_text_latest)%>%
  rename('Linear Correlation' = corr)%>%
  rename('Top-Box Ratio' = ratio)%>%
  rename('Driver Index' = driver_index)%>%
  rename('Top-Box Score (Percentile Rank)' = tbscore_rank)
  
kdr<-rowid_to_column(kdr)

kdr<-kdr%>%
  rename('Priority'=rowid)

ltr<-kd2%>%
  filter(varname==outvar)%>%
  select(question_text_latest,tbscore,percent_rank,n)%>%
  mutate(percent_rank=round(percent_rank,0))%>%
  mutate(tbscore=round(tbscore,1))%>%
  mutate(tbscore_rank=paste(tbscore," (",percent_rank,")"))%>%
  rename('Question' = question_text_latest)%>%
  rename('Top-Box Score' = tbscore)%>%
  rename('Percentile Rank'= percent_rank)%>%
  rename('Top-Box Score (Percentile Rank)' = tbscore_rank)
```

#### `r clinic_filter` (`r params$unit`)

------------------------------------------------------------------------

<!--  *** inserts a horizontal line -->

[The table lists the top ten survey questions, sorted in order of priority, that drive the respondents' top box score for the Institutional Measure:]{.important}

<center>***"`r ltr[,1]`"***</center>

```{r}
#| echo: false
#| warning: false

ltr2<-ltr%>%
  mutate("Priority"="")%>%
  mutate("Linear Correlation"="")%>%
  mutate("Top-Box Ratio"="")%>%
  mutate("Driver Index"="")%>%
  select("Priority","Question","Linear Correlation","Top-Box Ratio","Driver Index","Top-Box Score (Percentile Rank)")


total<-rbind(ltr2,kdr)

total%>%
  gt()%>%
  cols_align(align="center",
             columns = everything()) %>%
  tab_options(
    table.font.size = px(14L),
    column_labels.font.size = px(15L),
    column_labels.font.weight = "bold",
    # column_labels.background.color = '#002f6c') %>% #Moffitt Deep Blue
    column_labels.background.color = '#a4dbe8') %>% #Moffitt Light Blue
  # cols_width(
  #   starts_with("Question") ~ px(500)) %>%
  cols_align(
    align = "left",
    columns = Question) %>%
  tab_style(
    style=cell_text(align="center"),
    locations = cells_column_labels(columns = everything())
            )

```

{{< pagebreak >}}

**Notes:**

-   This summarizes the results of ***`r ltr[,4]`*** surveys received between ***`r min(data$newdate)`*** and ***`r max(data$newdate)`***.

-   The percentile rank is an internal rank that compares all clinics within the service line. For example, a percentile rank of 90 means the score is in the top 10 percent of all clinics.

-   The correlation measures the strength of the linear association between the response to the institutional measure and the question of interest.

-   The top box ratio calculates the likelihood of giving the top box score for the institutional measure, given the score is a top box for the question of interest.

-   The driver index sorts the combined correlation and top box ratio scores.

-   The priority order is determined by combining the driver index and the percentile rank.
